# -*- coding: utf-8 -*-
"""homework_5_airflow_pipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bf52XYq-87y1MSivW5Qoi78cVTixsbuq
"""

pip install apache-airflow

pip install apache-airflow-providers-snowflake

from airflow import DAG
from airflow.decorators import task
from airflow.models import Variable
from airflow.providers.snowflake.hooks.snowflake import SnowflakeHook
from airflow.utils.dates import days_ago
import requests
import pandas as pd
import json

# Define the DAG
with DAG(
    dag_id='homework_5_airflow_pipeline',
    schedule_interval=None,  # Manual trigger
    start_date=days_ago(1),
    catchup=False,
    tags=['homework', 'airflow', 'snowflake']
) as dag:

    # Task 1: Fetch data from Alpha Vantage API
    @task
    def get_alpha_vantage_data():
        """Fetch stock data from Alpha Vantage API."""
        try:
            api_key = Variable.get("alpha_vantage_api_key")  # Retrieve API key from Airflow Variables
            url = f"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey={api_key}"
            response = requests.get(url)
            data = response.json()

            # Extract time series data
            time_series = data.get('Time Series (Daily)', {})
            df = pd.DataFrame.from_dict(time_series, orient='index')
            df.columns = ['open', 'high', 'low', 'close', 'volume']
            df.index = pd.to_datetime(df.index)

            return df  # Returning the DataFrame containing stock data
        except Exception as e:
            raise Exception(f"Error fetching data from Alpha Vantage: {e}")

    # Task 2: Load data into Snowflake
    @task
    def load_data_to_snowflake(stock_data: pd.DataFrame):
        """Load stock data into Snowflake using SnowflakeHook."""
        try:
            # Fetch Snowflake connection details from Airflow
            snowflake_conn_id = 'your_snowflake_connection_id'  # Replace with your Snowflake connection ID
            hook = SnowflakeHook(snowflake_conn_id=snowflake_conn_id)

            # SQL statement to create the table if it doesn't exist
            create_table_query = """
            CREATE TABLE IF NOT EXISTS STOCK_DATA (
                DATE DATE,
                OPEN NUMBER,
                HIGH NUMBER,
                LOW NUMBER,
                CLOSE NUMBER,
                VOLUME NUMBER
            );
            """

            # Execute the table creation query
            hook.run(create_table_query)

            # Convert DataFrame to a format suitable for insertion (e.g., JSON)
            stock_data_json = stock_data.to_dict(orient='records')

            # Prepare the SQL statement to insert the data into the table
            insert_query = """
            INSERT INTO STOCK_DATA (DATE, OPEN, HIGH, LOW, CLOSE, VOLUME)
            VALUES
            """

            # Append the data values to the insert query
            values = []
            for row in stock_data_json:
                values.append(f"('{row['date']}', {row['open']}, {row['high']}, {row['low']}, {row['close']}, {row['volume']})")

            # Execute the insert query
            insert_query += ', '.join(values)
            hook.run(insert_query)

            return "Data loaded successfully into Snowflake."
        except Exception as e:
            raise Exception(f"Error loading data into Snowflake: {e}")

    # Task 3: Orchestrate the DAG - Set task dependencies
    stock_data = get_alpha_vantage_data()
    load_data_to_snowflake(stock_data)